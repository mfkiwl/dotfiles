#!/usr/bin/env python3

import json
import subprocess
import sys
from typing import Tuple


def parse_args() -> Tuple[str, bool]:
    try:
        project = sys.argv[1].strip()
    except IndexError:
        project = ""

    try:
        force_rename = sys.argv[2].strip().lower() == "--force"
    except IndexError:
        force_rename = False

    return project, force_rename


def find_current_workspace() -> Tuple[str, int]:
    result = subprocess.run(
        ["swaymsg", "-t", "get_workspaces"], capture_output=True, text=True
    )
    workspaces = json.loads(result.stdout)

    for workspace in workspaces:
        if workspace["focused"]:
            return workspace["name"], workspace["num"]
    else:
        print("Can't rename workspace - unable to find focused workspace")
        sys.exit(2)


def get_number_of_windows_on_workspace(workspace_name: str) -> int:
    def get_nodes(root):
        return root.get("nodes", [])

    def count_nodes(root):
        nodes = root.get("nodes", [])
        if nodes:
            return sum(map(count_nodes, nodes))
        else:
            return 1

    result = subprocess.run(
        ["swaymsg", "-t", "get_tree"], capture_output=True, text=True
    )
    tree = json.loads(result.stdout)

    displays = [n for n in get_nodes(tree) if n["name"] != "__i3"]
    for display in displays:
        for workspace in get_nodes(display):
            if workspace["name"] == workspace_name:
                return count_nodes(workspace)
    else:
        return 0


def rename_current_workspace(new_name: str):
    subprocess.run(["swaymsg", "rename", "workspace", "to", new_name])


project_name, force_rename = parse_args()
workspace_name, workspace_number = find_current_workspace()

new_name = (
    f"{workspace_number}:{project_name}" if project_name else f"{workspace_number}"
)

if force_rename:
    rename_current_workspace(new_name)
else:
    n_windows = get_number_of_windows_on_workspace(workspace_name)
    if n_windows <= 1:
        rename_current_workspace(new_name)
